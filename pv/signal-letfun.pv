set expandIfTermsToTerms = false. 

free io:channel.
type privkey.
type pubkey.
type key.
fun b2k(bitstring):key[data].
fun k2b(key):bitstring[data].
fun pk2b(pubkey):bitstring[data].

const G:pubkey.
fun dh(privkey,pubkey) : pubkey.
equation forall x:privkey,y:privkey;
	 dh(x,dh(y,G)) = 
	 dh(y,dh(x,G)).

type keypair.
fun pair(privkey,pubkey) : keypair [data].

fun sign(privkey,bitstring) : bitstring.
reduc forall sk:privkey,x:bitstring;
      verify(dh(sk,G),x,sign(sk,x)) = true.

fun enc(key,key,bitstring): bitstring.
reduc forall k:key,iv:key,x:bitstring;
      dec(k,iv,enc(k,iv,x)) = x.
      
fun hmac(key,bitstring):bitstring.
fun hkdf0(bitstring,bitstring,bitstring):key.
fun hkdf1(bitstring,bitstring,bitstring):key.
fun hkdf2(bitstring,bitstring,bitstring):key.

letfun pk(s:privkey) = dh(s,G).
letfun keygen() = 
       new s:privkey;
       pair(s,pk(s)).

(*
const tag_signed_key:bitstring.
const tag_init_ephemeral_key:bitstring.
const tag_resp_ephemeral_key:bitstring.
const tag_sending_ephemeral_key:bitstring.
fun dh_s(pubkey,bitstring):privkey[private].
letfun keygen(pkA:pubkey,tag:bitstring) =
       pair(dh_s(pkA,tag),pk(dh_s(pkA,tag))).
*)

table identityKeys(pubkey,privkey).
table onetimePreKeys(pubkey,privkey,pubkey).
table signedPreKeys(pubkey,privkey,pubkey,bitstring).

type session.
(* Session Format:
   our_signed_pub_key, their_signed_pub_key, 
   our_sending_ephemeral_prub_key, our_sending_ephemeral_priv_key, root_key
*)
fun Session(pubkey,pubkey,pubkey,privkey,key):session [data].
type chain.
(* Chain Format:
   SendingChain(our_sending_ephemeral_pub_key,chain_key, prev_counter, counter, message_key)
   SendingChain(their_sending_ephemeral_pub_key,chain_key, prev_counter, counter, message_key)
*)
fun SendingChain(pubkey,key,bitstring,bitstring,key):chain [data].
fun ReceivingChain(pubkey,key,bitstring,bitstring,key):chain [data].

table sessions(pubkey,pubkey,session).
table chains(pubkey,pubkey,chain).

fun msg(pubkey,pubkey):bitstring [private].
fun msg0(pubkey,pubkey):bitstring [private].
const FF:bitstring.
const ZZ:bitstring.
const Zero:bitstring.
const One:bitstring.
const FiftyOne:bitstring.
const label_WhisperText:bitstring.
const label_WhisperRatchet:bitstring.
const label_WhisperMessageKeys:bitstring.
fun concat(bitstring,bitstring):bitstring [data].
(* WhisperMessage format: ephemeral_key, prec_counter, counter, ciphertext *)
fun WhisperMessage(pubkey,bitstring,bitstring,bitstring): bitstring [data].
(* PreKeyWhisperMessage format: registration_id, our_identity_key, our_signed_key, their_signed_key, their_ephemeral_key, defined_their_ephemeral_key, whisper_msg *)
fun PreKeyWhisperMessage(bitstring,pubkey,pubkey,pubkey,pubkey,bool,bitstring): bitstring [data].

letfun x3dh_i(
       our_identity_priv_key: privkey,
       our_signed_priv_key: privkey,
       their_identity_pub_key: pubkey,
       their_signed_pub_key: pubkey,
       their_ephemeral_pub_key: pubkey,
       defined_their_ephemeral_pub_key: bool) =
	  let dh1 = dh(our_identity_priv_key,their_signed_pub_key) in
	  let dh2 = dh(our_signed_priv_key,their_identity_pub_key) in
	  let dh3 = dh(our_signed_priv_key,their_signed_pub_key) in
	  let shared_secret =
	      	concat(concat(concat(FF,pk2b(dh1)),pk2b(dh2)),pk2b(dh3)) in
	  if defined_their_ephemeral_pub_key = true then
	     let dh4 = dh(our_signed_priv_key,their_ephemeral_pub_key) in
	     concat(shared_secret,pk2b(dh4))
	  else shared_secret.

letfun init_session_initiator(
       our_identity_priv_key: privkey,
       our_signed_priv_key: privkey,
       our_sending_ephemeral_priv_key: privkey,
       their_identity_pub_key: pubkey,
       their_signed_pub_key: pubkey,
       their_signed_pub_key_signature: bitstring,
       their_ephemeral_pub_key: pubkey,
       defined_their_ephemeral_pub_key: bool) =
       if verify(their_identity_pub_key,
		 pk2b(their_signed_pub_key),
		 their_signed_pub_key_signature) then
	  let our_signed_pub_key = pk(our_signed_priv_key) in
	  let our_sending_ephemeral_pub_key = pk(our_sending_ephemeral_priv_key) in
	  let our_identity_pub_key = pk(our_identity_priv_key) in
	  
	  let shared_secret = x3dh_i(our_identity_priv_key,
				    our_signed_priv_key,
				    their_identity_pub_key,
				    their_signed_pub_key,
				    their_ephemeral_pub_key,
				    defined_their_ephemeral_pub_key) in
	  let root_key = hkdf0(shared_secret,ZZ,label_WhisperText) in
	  let shared_secret' = dh(our_sending_ephemeral_priv_key,their_signed_pub_key) in
	  let root_key' = hkdf0(pk2b(shared_secret'),k2b(root_key),label_WhisperRatchet) in
	  let chain_key = hkdf1(pk2b(shared_secret'),k2b(root_key),label_WhisperRatchet) in
	  let s = Session(our_signed_pub_key,
			  their_signed_pub_key,
			  our_sending_ephemeral_pub_key,
			  our_sending_ephemeral_priv_key,
			  root_key') in
	  let msg_key0 = hmac(chain_key,Zero) in
	  let chain_key1 = hmac(chain_key,One) in
	  let c = SendingChain(our_sending_ephemeral_pub_key,b2k(chain_key1),Zero,Zero,b2k(msg_key0)) in
	  (s,c).

letfun advance_chain(c:chain,ctr':bitstring) =
       let SendingChain(sepk,chain_key,pctr,ctr,msg_key) = c in (
         let msg_key' = hmac(chain_key,Zero) in
         let chain_key' = hmac(chain_key,One) in
         let c' = SendingChain(sepk,b2k(chain_key'),ctr,ctr',b2k(msg_key')) in
         c')
       else 
       let ReceivingChain(sepk,chain_key,pctr,ctr,msg_key) = c in (
         let msg_key' = hmac(chain_key,Zero) in
         let chain_key' = hmac(chain_key,One) in
         let c' = ReceivingChain(sepk,b2k(chain_key'),ctr,ctr',b2k(msg_key')) in
         c').

letfun x3dh_r(
       our_identity_priv_key: privkey,
       our_signed_priv_key: privkey,
       our_ephemeral_priv_key: privkey,
       defined_our_ephemeral_priv_key: bool,
       their_identity_pub_key: pubkey,
       their_signed_pub_key: pubkey) = 
       	  let dh1 = dh(our_signed_priv_key,their_identity_pub_key) in
	  let dh2 = dh(our_identity_priv_key,their_signed_pub_key) in
	  let dh3 = dh(our_signed_priv_key,their_signed_pub_key) in
	  let shared_secret =
	      	concat(concat(concat(FF,pk2b(dh1)),pk2b(dh2)),pk2b(dh3)) in
	  if defined_our_ephemeral_priv_key = true then
	     let dh4 = dh(our_ephemeral_priv_key,their_signed_pub_key) in
	     concat(shared_secret,pk2b(dh4))
	  else shared_secret.

letfun init_session_responder(
       our_identity_priv_key: privkey,
       our_signed_priv_key: privkey,
       our_ephemeral_priv_key: privkey,
       defined_our_ephemeral_priv_key: bool,
       their_identity_pub_key: pubkey,
       their_ephemeral_pub_key: pubkey) = 

       let their_signed_pub_key = their_ephemeral_pub_key in
       let our_identity_pub_key = pk(our_identity_priv_key) in
       let our_signed_pub_key = pk(our_signed_priv_key) in
       let shared_secret = x3dh_r(our_identity_priv_key,
       			          our_signed_priv_key,
       			          our_ephemeral_priv_key,
       			          defined_our_ephemeral_priv_key,
				  their_identity_pub_key,
				  their_signed_pub_key) in
       let root_key = hkdf0(shared_secret,ZZ,label_WhisperText) in
       let s = Session(our_signed_pub_key,
       		       their_signed_pub_key,
		       our_signed_pub_key,
		       our_signed_priv_key,
		       root_key) in
       s.

letfun recv_ratchet(
       nepk:pubkey,oesk:privkey,s:session,pctr:bitstring
       ) =
       let Session(ospk,tspk,osepk,osesk,rk) = s in
       let shared_secret = dh(osesk,nepk) in
       let root_key' = hkdf0(pk2b(shared_secret),k2b(rk),label_WhisperRatchet) in
       let chain_key = hkdf1(pk2b(shared_secret),k2b(rk),label_WhisperRatchet) in
       let msg_key0 = hmac(chain_key,Zero) in
       let chain_key1 = hmac(chain_key,One) in
       let rc = ReceivingChain(nepk,b2k(chain_key1),pctr,Zero,b2k(msg_key0)) in
       let oepk = pk(oesk) in
       let shared_secret' = dh(oesk,nepk) in
       let root_key'' = hkdf0(pk2b(shared_secret'),k2b(root_key'),label_WhisperRatchet) in
       let chain_key' = hkdf1(pk2b(shared_secret'),k2b(root_key'),label_WhisperRatchet) in
       let msg_key0' = hmac(chain_key',Zero) in
       let chain_key1' = hmac(chain_key',One) in
       let sc = SendingChain(oepk,b2k(chain_key1'),pctr,Zero,b2k(msg_key0')) in
       let s' = Session(ospk,tspk,oepk,oesk,root_key'') in
       (s',rc,sc).


letfun encrypt(our_identity_pub_key:pubkey,
	       their_identity_pub_key:pubkey,
	       plaintext:bitstring,c:chain) =
       let SendingChain(sepk,ck,pctr,ctr,msg_key) = c in
       let enc_key = hkdf0(k2b(msg_key),ZZ,label_WhisperMessageKeys) in
       let enc_iv  = hkdf1(k2b(msg_key),ZZ,label_WhisperMessageKeys) in
       let mac_key = hkdf2(k2b(msg_key),ZZ,label_WhisperMessageKeys) in
       let ciphertext = enc(enc_key,enc_iv,plaintext) in
       let whisper_msg = WhisperMessage(sepk,pctr,ctr,ciphertext) in
       let mac_input = concat(concat(concat(pk2b(their_identity_pub_key),pk2b(our_identity_pub_key)),FiftyOne),whisper_msg) in
       let mac = hmac(mac_key,mac_input) in
       concat(concat(FiftyOne,whisper_msg),mac).


letfun decrypt(our_identity_pub_key:pubkey,
	       their_identity_pub_key:pubkey,
    	       msg:bitstring,c:chain) =
       let ReceivingChain(sepk,ck,pctr,ctr,msg_key) = c in
       let concat(concat(=FiftyOne,whisper_msg),mac) = msg in
       let WhisperMessage(=sepk,=pctr,=ctr,ciphertext) = whisper_msg in
       let enc_key = hkdf0(k2b(msg_key),ZZ,label_WhisperMessageKeys) in
       let enc_iv  = hkdf1(k2b(msg_key),ZZ,label_WhisperMessageKeys) in
       let mac_key = hkdf2(k2b(msg_key),ZZ,label_WhisperMessageKeys) in
       let mac_input = concat(concat(concat(pk2b(our_identity_pub_key),pk2b(their_identity_pub_key)),FiftyOne),whisper_msg) in
       let exp_mac = hmac(mac_key,mac_input) in
       if mac = exp_mac then
          let plaintext = dec(enc_key,enc_iv,ciphertext) in
 	  plaintext.

letfun send0(
       registration_id: bitstring,
       our_identity_priv_key: privkey,
       our_signed_priv_key: privkey,
       our_sending_ephemeral_priv_key: privkey,
       their_identity_pub_key: pubkey,
       their_signed_pub_key: pubkey,
       their_signed_pub_key_signature: bitstring,
       their_ephemeral_pub_key: pubkey,
       defined_their_ephemeral_pub_key: bool,
       plaintext:bitstring) =
     let our_identity_pub_key = pk(our_identity_priv_key) in
     let (s:session,c:chain) = init_session_initiator(
       our_identity_priv_key,
       our_signed_priv_key,
       our_sending_ephemeral_priv_key,
       their_identity_pub_key,
       their_signed_pub_key,
       their_signed_pub_key_signature,
       their_ephemeral_pub_key,
       defined_their_ephemeral_pub_key) in
     let Session(ospk,tspk,osepk,osesk,rk) = s in
     let cmsg = encrypt(our_identity_pub_key,their_identity_pub_key,plaintext,c) in
     let prekey_msg = PreKeyWhisperMessage(registration_id,our_identity_pub_key,ospk,
			  their_signed_pub_key,their_ephemeral_pub_key,
			  defined_their_ephemeral_pub_key,cmsg) in
     (s,c,prekey_msg).

letfun recv0(
       our_identity_priv_key: privkey,
       our_signed_priv_key: privkey,
       our_ephemeral_priv_key: privkey,
       defined_our_ephemeral_priv_key: bool,
       our_sending_ephemeral_priv_key: privkey,
       their_identity_pub_key: pubkey,
       their_ephemeral_pub_key: pubkey,
       their_sending_ephemeral_pub_key:pubkey,
       msg:bitstring) = 
     let s:session = init_session_responder(
    			            our_identity_priv_key,
				    our_signed_priv_key,
				    our_ephemeral_priv_key,
				    defined_our_ephemeral_priv_key,
				    their_identity_pub_key,
       				    their_ephemeral_pub_key) in
     let (s':session,rc:chain,sc:chain) = recv_ratchet(
     	 			    their_sending_ephemeral_pub_key,
     	 			    our_sending_ephemeral_priv_key,
				    s,Zero) in
     let our_ephemeral_pub_key = pk(our_ephemeral_priv_key) in
     let our_identity_pub_key = pk(our_identity_priv_key) in
     let our_signed_pub_key = pk(our_signed_priv_key) in
     let PreKeyWhisperMessage(registration_id,
			=their_identity_pub_key,=their_ephemeral_pub_key,
	 		=our_signed_pub_key,=our_ephemeral_pub_key,
			=defined_our_ephemeral_priv_key,cmsg) = msg in
     let plaintext = decrypt(our_identity_pub_key,their_identity_pub_key,cmsg,rc) in
     (s',rc,sc,plaintext).

event Send0(pubkey,pubkey,bitstring).
event Recv0(pubkey,pubkey,bitstring).
event Send(pubkey,pubkey,bitstring).
event Recv(pubkey,pubkey,bitstring).

let Device = 
    get identityKeys(pkA,skA) in
    
    (!let pair(sskA,sekA) = keygen() in
      let sig = sign(skA,pk2b(sekA)) in
      insert signedPreKeys(pkA,sskA,sekA,sig);
      out (io,(sekA,sig)))
  | (!let pair(oskA,okA) = keygen() in
      insert onetimePreKeys(pkA,oskA,okA);
      out (io,okA))
  | (!in (io,(reg:bitstring,pkB:pubkey,spkB:pubkey,sigB:bitstring,epkB:pubkey,depkB:bool));
     get identityKeys(=pkB,xxx) in
     let pair(eph1s,eph1p) = keygen() in
     let pair(eph2s,eph2p) = keygen() in
     out (io,(eph1p,eph2p));
     let (s:session,c:chain,pmsg:bitstring) = send0(reg,skA,eph1s,eph2s,pkB,spkB,sigB,epkB,depkB,msg0(pkA,pkB)) in
(*     insert sessions(pkA,pkB,s);
       insert chains(pkA,pkB,c);
       *)
     event Send0(pkA,pkB,msg0(pkA,pkB));
     out (io,pmsg))

  | (!in (io,(sekA:pubkey,okA:pubkey,dekA:bool,
    	      pkB:pubkey,ekB:pubkey,sekB:pubkey,cmsg:bitstring));
     get signedPreKeys(=pkA,sskA,=sekA,sig) in
     get onetimePreKeys(=pkA,oskA,=okA) in
     get identityKeys(=pkB,xxx) in
     let pair(eph3s,eph3p) = keygen() in
     out (io,eph3p);
     let (s:session,rc:chain,sc:chain,plain:bitstring) =
     	 recv0(skA,sskA,oskA,dekA,eph3s,pkB,ekB,sekB,cmsg) in
     event Recv0(pkA,pkB,plain);
(*     insert sessions(pkA,pkB,s); 
     insert chains(pkA,pkB,rc);
     insert chains(pkA,pkB,sc);
     *)
     0
     )

(*
  | (!in (io,ctr':bitstring);
     get chains(=pkA,pkB,c) in
     let c' = advance_chain(c,ctr') in
     insert chains(pkA,pkB,c'))
  *)
(*
  | (!in (io,(sekB:pubkey,pctr:bitstring));
     let pair(eph4s,eph4p) = keygen() in
     get sessions(=pkA,pkB,s) in
     let (s',rc,sc) = recv_ratchet(sekB,eph4s,s,pctr) in
     insert sessions(pkA,pkB,s');
     insert chains(pkA,pkB,rc);
     insert chains(pkA,pkB,sc))
  *)
(*  | (!get sessions(=pkA,pkB,s) in
     get chains(=pkA,=pkB,c) in
     let cipher = encrypt(pkA,pkB,msg(pkA,pkB),c) in
     event Send(pkA,pkB,msg(pkA,pkB));
     out (io,cipher))

  | (!in (io,cipher:bitstring);
     get sessions(=pkA,pkB,s) in
     get chains(=pkA,=pkB,c) in
     let plain = decrypt(pkA,pkB,cipher,c) in
     event Recv(pkA,pkB,plain))
     *)
.

query pA:pubkey,pB:pubkey,plain:bitstring;
      event(Send0(pA,pB,plain));
      event(Recv0(pA,pB,plain));
      event(Recv0(pA,pB,plain)) ==> event(Send0(pB,pA,plain)).
query pA:pubkey,pB:pubkey,plain:bitstring;
      event(Send(pA,pB,plain));
      event(Recv(pA,pB,plain));
      event(Recv(pA,pB,plain)) ==> event(Send(pB,pA,plain)).

process
	(! new sk:privkey; let p = pk(sk) in insert identityKeys(p,sk); out(io,p))
	| !Device

