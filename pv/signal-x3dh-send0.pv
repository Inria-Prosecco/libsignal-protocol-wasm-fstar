(* set expandIfTermsToTerms = false.  *)

free io:channel.
type privkey.
type pubkey.
const ZeroPriv:privkey.
const ZeroPub:pubkey.
type key.
fun b2k(bitstring):key[data].
fun k2b(key):bitstring[data].
fun pk2b(pubkey):bitstring[data].

const G:pubkey.
fun dh(privkey,pubkey) : pubkey.
equation forall x:privkey,y:privkey;
	 dh(x,dh(y,G)) = 
	 dh(y,dh(x,G)).

type keypair.
fun pair(privkey,pubkey) : keypair [data].

fun sign(privkey,bitstring) : bitstring.
reduc forall sk:privkey,x:bitstring;
      verify(dh(sk,G),x,sign(sk,x)) = true.

fun enc(key,key,bitstring): bitstring.
reduc forall k:key,iv:key,x:bitstring;
      dec(k,iv,enc(k,iv,x)) = x.
      
fun hmac(key,bitstring):bitstring.
fun hkdf0(bitstring,bitstring,bitstring):key.
fun hkdf1(bitstring,bitstring,bitstring):key.
fun hkdf2(bitstring,bitstring,bitstring):key.

letfun hkdf3(x:bitstring,y:bitstring,z:bitstring) =
       let k1 = hkdf0(x,y,z) in
       let k2 = hkdf1(x,y,z) in
       let k3 = hkdf2(x,y,z) in
       (k1,k2,k3).
      
letfun pk(s:privkey) = dh(s,G).
letfun keygen() = 
       new s:privkey;
       pair(s,pk(s)).

(*
const tag_signed_key:bitstring.
const tag_init_ephemeral_key:bitstring.
const tag_resp_ephemeral_key:bitstring.
const tag_sending_ephemeral_key:bitstring.
fun dh_s(pubkey,bitstring):privkey[private].
letfun keygen(pkA:pubkey,tag:bitstring) =
       pair(dh_s(pkA,tag),pk(dh_s(pkA,tag))).
*)

table identityKeys(pubkey,privkey).
table onetimePreKeys(pubkey,privkey,pubkey).
table signedPreKeys(pubkey,privkey,pubkey,bitstring).

type session.
(* Session Format:
   our_signed_pub_key,
   their_signed_pub_key,
   our_sending_ephemeral_priv_key,
   our_sending_ephemeral_pub_key,
   their_sending_ephemeral_pub_key
   root_key,
   version
*)
fun Session(pubkey,pubkey,privkey,pubkey,pubkey,key,bitstring):session [data].
type chain.
(* Chain Format:
   ChainS(our_sending_ephemeral_pub_key,chain_key, prev_counter, counter, message_key)
   ChainR(their_sending_ephemeral_pub_key,chain_key, prev_counter, counter, message_key)
*)
fun ChainS(pubkey,key,bitstring,bitstring,key):chain [data].
fun ChainR(pubkey,key,bitstring,bitstring,key):chain [data].

table sessions(pubkey,pubkey,session).

fun msg(pubkey,pubkey,bitstring):bitstring [private].

const FF:bitstring.
const ZZ:bitstring.
const Zero:bitstring.
const One:bitstring.
const Two:bitstring.
const FiftyOne:bitstring.
const label_WhisperText:bitstring.
const label_WhisperRatchet:bitstring.
const label_WhisperMessageKeys:bitstring.
fun concat(bitstring,bitstring):bitstring [data].
(* WhisperMessage format: ephemeral_key, prec_counter, counter, ciphertext *)
fun WhisperMessage(pubkey,bitstring,bitstring,bitstring): bitstring [data].
(* PreKeyWhisperMessage format: registration_id, our_identity_key, our_signed_key, their_signed_key, their_ephemeral_key, defined_their_ephemeral_key, whisper_msg *)
fun PreKeyWhisperMessage(bitstring,pubkey,pubkey,pubkey,pubkey,bool,bitstring): bitstring [data].

letfun x3dh_i(
       our_identity_priv_key: privkey,
       our_signed_priv_key: privkey,
       their_identity_pub_key: pubkey,
       their_signed_pub_key: pubkey,
       their_ephemeral_pub_key: pubkey,
       defined_their_ephemeral_pub_key: bool) =
	  let dh1 = dh(our_identity_priv_key,their_signed_pub_key) in
	  let dh2 = dh(our_signed_priv_key,their_identity_pub_key) in
	  let dh3 = dh(our_signed_priv_key,their_signed_pub_key) in
	  let shared_secret =
	      	concat(concat(concat(FF,pk2b(dh1)),pk2b(dh2)),pk2b(dh3)) in
	  if defined_their_ephemeral_pub_key = true then
	     let dh4 = dh(our_signed_priv_key,their_ephemeral_pub_key) in
	     concat(shared_secret,pk2b(dh4))
	  else shared_secret.

letfun advance_chain(c:chain,ctr':bitstring) =
       let ChainS(sepk,chain_key,pctr,ctr,msg_key) = c in (
         let msg_key' = hmac(chain_key,Zero) in
         let chain_key' = hmac(chain_key,One) in
         let c' = ChainS(sepk,b2k(chain_key'),ctr,ctr',b2k(msg_key')) in
         c')
       else 
       let ChainR(sepk,chain_key,pctr,ctr,msg_key) = c in (
         let msg_key' = hmac(chain_key,Zero) in
         let chain_key' = hmac(chain_key,One) in
         let c' = ChainR(sepk,b2k(chain_key'),ctr,ctr',b2k(msg_key')) in
         c').

letfun x3dh_r(
       our_identity_priv_key: privkey,
       our_signed_priv_key: privkey,
       our_ephemeral_priv_key: privkey,
       defined_our_ephemeral_priv_key: bool,
       their_identity_pub_key: pubkey,
       their_signed_pub_key: pubkey) = 
       	  let dh1 = dh(our_signed_priv_key,their_identity_pub_key) in
	  let dh2 = dh(our_identity_priv_key,their_signed_pub_key) in
	  let dh3 = dh(our_signed_priv_key,their_signed_pub_key) in
	  let shared_secret =
	      	concat(concat(concat(FF,pk2b(dh1)),pk2b(dh2)),pk2b(dh3)) in
	  if defined_our_ephemeral_priv_key = true then
	     let dh4 = dh(our_ephemeral_priv_key,their_signed_pub_key) in
	     concat(shared_secret,pk2b(dh4))
	  else shared_secret.

letfun encrypt(our_identity_pub_key:pubkey,
	       their_identity_pub_key:pubkey,
	       plaintext:bitstring,
	       c:chain) =
       let ChainS(sepk,ck,pctr,ctr,msg_key) = c in
       let enc_key = hkdf0(k2b(msg_key),ZZ,label_WhisperMessageKeys) in
       let enc_iv  = hkdf1(k2b(msg_key),ZZ,label_WhisperMessageKeys) in
       let mac_key = hkdf2(k2b(msg_key),ZZ,label_WhisperMessageKeys) in
       let ciphertext = enc(enc_key,enc_iv,plaintext) in
       let whisper_msg = WhisperMessage(sepk,pctr,ctr,ciphertext) in
       let mac_input = concat(concat(concat(pk2b(their_identity_pub_key),pk2b(our_identity_pub_key)),FiftyOne),whisper_msg) in
       let mac = hmac(mac_key,mac_input) in
       concat(concat(FiftyOne,whisper_msg),mac).


letfun decrypt(our_identity_pub_key:pubkey,
	       their_identity_pub_key:pubkey,
    	       msg:bitstring,c:chain) =
       let ChainR(sepk,ck,pctr,ctr,msg_key) = c in
       let concat(concat(=FiftyOne,whisper_msg),mac) = msg in
       let WhisperMessage(=sepk,=pctr,=ctr,ciphertext) = whisper_msg in
       let enc_key = hkdf0(k2b(msg_key),ZZ,label_WhisperMessageKeys) in
       let enc_iv  = hkdf1(k2b(msg_key),ZZ,label_WhisperMessageKeys) in
       let mac_key = hkdf2(k2b(msg_key),ZZ,label_WhisperMessageKeys) in
       let mac_input = concat(concat(concat(pk2b(our_identity_pub_key),pk2b(their_identity_pub_key)),FiftyOne),whisper_msg) in
       let exp_mac = hmac(mac_key,mac_input) in
       if mac = exp_mac then
          let plaintext = dec(enc_key,enc_iv,ciphertext) in
 	  plaintext.


event Send0(pubkey,pubkey,bitstring).
event Recv0(pubkey,pubkey,bitstring).
event InitiatorSession(pubkey,pubkey,key,key).
event ResponderSession(pubkey,pubkey,key,key).
event LongTermCompromise(pubkey).

let Device = 
    get identityKeys(pkA,skA) in
    let our_identity_priv_key = skA in
    let our_identity_pub_key = pkA in
    
    (!let pair(sskA,sekA) = keygen() in
      let sig = sign(skA,pk2b(sekA)) in
      insert signedPreKeys(pkA,sskA,sekA,sig);
      out (io,(sekA,sig)))
  | (!let pair(oskA,okA) = keygen() in
      insert onetimePreKeys(pkA,oskA,okA);
      out (io,okA))
  | (!in (io,(
       their_identity_pub_key: pubkey,
       their_signed_pub_key: pubkey,
       their_signed_pub_key_signature: bitstring,
       their_ephemeral_pub_key: pubkey,
       defined_their_ephemeral_pub_key: bool));
     get identityKeys(=their_identity_pub_key,xxx) in
     let pair(our_signed_priv_key,our_signed_pub_key) = keygen() in
     let pair(our_sending_ephemeral_priv_key,our_sending_ephemeral_pub_key) = keygen() in
     
       (* BEGIN-INLINING init_send *)
       if verify(their_identity_pub_key,
		 pk2b(their_signed_pub_key),
		 their_signed_pub_key_signature) then (
	  let shared_secret = x3dh_i(our_identity_priv_key,
				    our_signed_priv_key,
				    their_identity_pub_key,
				    their_signed_pub_key,
				    their_ephemeral_pub_key,
				    defined_their_ephemeral_pub_key) in
	  let root_key = hkdf0(shared_secret,ZZ,label_WhisperText) in
          let shared_secret' = dh(our_sending_ephemeral_priv_key,their_signed_pub_key) in
          let (root_key':key,chain_key:key,zzz:key) = hkdf3(pk2b(shared_secret'),k2b(root_key),label_WhisperRatchet) in
          let msg_key0 = b2k(hmac(chain_key,Zero)) in
          let chain_key1 = b2k(hmac(chain_key,One)) in
          let s = Session(our_signed_pub_key,
	       	       their_signed_pub_key,
		       our_sending_ephemeral_priv_key,
		       our_sending_ephemeral_pub_key,
		       their_signed_pub_key,
		       root_key',Zero) in
          let sc = ChainS(our_sending_ephemeral_pub_key,chain_key1,Zero,Zero,msg_key0) in
          let plaintext = msg(our_identity_pub_key,their_identity_pub_key,Zero) in
          let prekey_msg = encrypt(our_identity_pub_key,their_identity_pub_key,plaintext,sc) in
      (* END-INLINING send0 *)
    	  event Send0(our_identity_pub_key,their_identity_pub_key,plaintext);
	  event InitiatorSession(our_identity_pub_key,their_identity_pub_key,root_key,chain_key);
          out (io,(our_signed_pub_key,our_sending_ephemeral_pub_key,prekey_msg))))

  | (!in (io,(
       our_signed_pub_key: pubkey,
       our_ephemeral_pub_key: pubkey,
       defined_our_ephemeral_priv_key: bool,
       their_identity_pub_key: pubkey,
       their_ephemeral_pub_key: pubkey,
       their_sending_ephemeral_pub_key:pubkey,
       prekey_msg:bitstring));
     get signedPreKeys(=pkA,our_signed_priv_key,=our_signed_pub_key,sig) in
     get onetimePreKeys(=pkA,our_ephemeral_priv_key,=our_ephemeral_pub_key) in
     get identityKeys(=their_identity_pub_key,xxx) in

     (* BEGIN-INLINING recv0 *)
     let their_signed_pub_key = their_ephemeral_pub_key in
     let shared_secret = x3dh_r(our_identity_priv_key,
       			        our_signed_priv_key,
       			        our_ephemeral_priv_key,
       			        defined_our_ephemeral_priv_key,
			        their_identity_pub_key,
			        their_signed_pub_key) in
     let root_key = hkdf0(shared_secret,ZZ,label_WhisperText) in
     let shared_secret' = dh(our_signed_priv_key,their_sending_ephemeral_pub_key) in
     let (root_key':key,chain_key:key,zzz:key) = hkdf3(pk2b(shared_secret'),k2b(root_key),label_WhisperRatchet) in
     let msg_key0 = b2k(hmac(chain_key,Zero)) in
     let chain_key1 = b2k(hmac(chain_key,One)) in
     let s = Session(our_signed_pub_key,
        	      their_signed_pub_key,
		      our_signed_priv_key,
		      our_signed_pub_key,
		      their_sending_ephemeral_pub_key,
		      root_key',Zero) in
     let rc = ChainR(their_sending_ephemeral_pub_key,chain_key1,Zero,Zero,msg_key0) in
     let plaintext0 = decrypt(our_identity_pub_key,their_identity_pub_key,prekey_msg,rc) in
     (* END-INLINING recv0 *)    
     event Recv0(our_identity_pub_key,their_identity_pub_key,plaintext0);
     event ResponderSession(our_identity_pub_key,their_identity_pub_key,root_key,chain_key);
     0
     )
.

query pA:pubkey,pB:pubkey,ctr:bitstring;
      attacker(msg(pA,pB,ctr)) ==> event(LongTermCompromise(pB)).
      
query pA:pubkey,pB:pubkey,plain:bitstring;
      event(Send0(pA,pB,plain));
      event(Recv0(pA,pB,plain));
      event(Recv0(pA,pB,plain)) ==> event(Send0(pB,pA,plain)) || event(LongTermCompromise(pA)) || event(LongTermCompromise(pB)).

query pA:pubkey,pB:pubkey,rk:key,ck:key;
      event(InitiatorSession(pA,pB,rk,ck));
      event(ResponderSession(pA,pB,rk,ck)).

process
	(! new sk:privkey; let p = pk(sk) in insert identityKeys(p,sk); out(io,p))
	| (! get identityKeys(p,sk) in event LongTermCompromise(p); out(io,sk))
	| !Device

