module Test.Spec.Signal

open Lib.IntTypes
open Lib.RawIntTypes
open Lib.ByteSequence
open Lib.Sequence


///
/// Test for ratchet
///

#set-options "--max_fuel 0 --max_ifuel 0"

inline_for_extraction noextract let t0_input_ourEphemeralPrivKey_list : l:list uint8{List.Tot.length l == 32} =
  [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
    0x08uy; 0x2euy; 0x63uy; 0x91uy; 0xdeuy; 0xb7uy; 0x15uy; 0x4buy;
    0xd0uy; 0x37uy; 0x5duy; 0xf3uy; 0xfcuy; 0x07uy; 0xf8uy; 0x70uy;
    0x20uy; 0xa3uy; 0xb0uy; 0xfduy; 0x7auy; 0x8cuy; 0x6cuy; 0x90uy;
    0xe7uy; 0x3fuy; 0x0euy; 0x05uy; 0x4buy; 0xc2uy; 0xbfuy; 0x5duy
  ] in
  assert_norm(List.Tot.length l == 32);
  normalize_term l

let t0_input_ourEphemeralPrivKey : lbytes 32 =
  of_list t0_input_ourEphemeralPrivKey_list

inline_for_extraction noextract let t0_input_theirEphemeralPubKey_list : l:list uint8{List.Tot.length l == 33} =
  [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
    0x05uy; 0xa9uy; 0xecuy; 0xf6uy; 0x66uy; 0xecuy; 0x55uy; 0xfcuy;
    0x27uy; 0x98uy; 0x8euy; 0xccuy; 0x41uy; 0x7duy; 0xb0uy; 0xd6uy;
    0x2duy; 0xd5uy; 0xe1uy; 0xfauy; 0x75uy; 0x1duy; 0xa1uy; 0xf7uy;
    0xa2uy; 0xdduy; 0x2euy; 0xcauy; 0x0duy; 0x14uy; 0xc8uy; 0xbduy;
    0x46uy
  ] in
  assert_norm(List.Tot.length l == 33);
  normalize_term l

let t0_input_theirEphemeralPubKey : lbytes 33 =
  of_list t0_input_theirEphemeralPubKey_list

inline_for_extraction noextract let t0_input_rootKey_list : l:list uint8{List.Tot.length l == 32} =
  [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
    0x99uy; 0xcauy; 0x9fuy; 0xe1uy; 0xd0uy; 0x94uy; 0x6fuy; 0x20uy;
    0x61uy; 0xaduy; 0xcauy; 0x39uy; 0x4cuy; 0x2euy; 0x57uy; 0x4fuy;
    0xb3uy; 0xb5uy; 0x25uy; 0xe2uy; 0xeeuy; 0x1buy; 0x9fuy; 0x94uy;
    0x69uy; 0x1fuy; 0xd1uy; 0xeeuy; 0x75uy; 0xa3uy; 0x77uy; 0x01uy
  ] in
  assert_norm(List.Tot.length l == 32);
  normalize_term l

let t0_input_rootKey : lbytes 32 =
  of_list t0_input_rootKey_list

inline_for_extraction noextract let t0_output_rootKey_list : l:list uint8{List.Tot.length l == 32} =
  [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
    0xfauy; 0x60uy; 0xbcuy; 0x6duy; 0x0duy; 0xf9uy; 0x0cuy; 0xf1uy;
    0x52uy; 0x2duy; 0xaduy; 0x25uy; 0x6duy; 0x0euy; 0x82uy; 0xe6uy;
    0xcauy; 0x6duy; 0x21uy; 0xb2uy; 0x6fuy; 0xe1uy; 0x42uy; 0x82uy;
    0x02uy; 0x19uy; 0x10uy; 0xcbuy; 0xbeuy; 0x88uy; 0x31uy; 0x4duy
  ] in
  assert_norm(List.Tot.length l == 32);
  normalize_term l

let t0_output_rootKey : lbytes 32 =
  of_list t0_output_rootKey_list

inline_for_extraction noextract let t0_output_chainKey_list : l:list uint8{List.Tot.length l == 32} =
  [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
    0xd2uy; 0x1buy; 0xdeuy; 0xb5uy; 0x79uy; 0xfauy; 0x98uy; 0x2euy;
    0x9auy; 0xa9uy; 0xc8uy; 0x34uy; 0x5buy; 0x57uy; 0xd4uy; 0x5duy;
    0xdbuy; 0x68uy; 0x80uy; 0xecuy; 0xe0uy; 0xa7uy; 0xd9uy; 0xd1uy;
    0x72uy; 0xe7uy; 0x51uy; 0x06uy; 0x2duy; 0xb6uy; 0x92uy; 0x96uy
  ] in
  assert_norm(List.Tot.length l == 32);
  normalize_term l

let t0_output_chainKey : lbytes 32 =
  of_list t0_output_chainKey_list

///
/// Test for initiate
///


inline_for_extraction noextract let t1_input_ourIdentityPrivKey_list : l:list uint8{List.Tot.length l == 32} =
  [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
    0xd8uy; 0x3duy; 0x81uy; 0x41uy; 0xaauy; 0xd5uy; 0xf1uy; 0xd6uy;
    0x2duy; 0x78uy; 0xa1uy; 0xafuy; 0x09uy; 0xffuy; 0xbeuy; 0x61uy;
    0xf2uy; 0xd3uy; 0x45uy; 0x8euy; 0xebuy; 0x88uy; 0x7auy; 0x04uy;
    0x7auy; 0x58uy; 0xa0uy; 0x75uy; 0x65uy; 0xd2uy; 0x44uy; 0x63uy
  ] in
  assert_norm(List.Tot.length l == 32);
  normalize_term l

let t1_input_ourIdentityPrivKey : lbytes 32 =
  of_list t1_input_ourIdentityPrivKey_list

inline_for_extraction noextract let t1_input_basePrivKey_list : l:list uint8{List.Tot.length l == 32} =
  [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
    0x20uy; 0x60uy; 0xfeuy; 0x31uy; 0xb0uy; 0x41uy; 0xd2uy; 0x81uy;
    0x27uy; 0xacuy; 0x35uy; 0xcbuy; 0xfeuy; 0x79uy; 0x0euy; 0x2auy;
    0x25uy; 0xf9uy; 0x2duy; 0x2euy; 0x21uy; 0xebuy; 0x22uy; 0x51uy;
    0x69uy; 0x0auy; 0xe7uy; 0x5euy; 0x73uy; 0x2fuy; 0x5cuy; 0x4duy
  ] in
  assert_norm(List.Tot.length l == 32);
  normalize_term l

let t1_input_basePrivKey : lbytes 32 =
  of_list t1_input_basePrivKey_list

inline_for_extraction noextract let t1_input_ourOneTimePrivKey_list : l:list uint8{List.Tot.length l == 32} =
  [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
    0x08uy; 0x2euy; 0x63uy; 0x91uy; 0xdeuy; 0xb7uy; 0x15uy; 0x4buy;
    0xd0uy; 0x37uy; 0x5duy; 0xf3uy; 0xfcuy; 0x07uy; 0xf8uy; 0x70uy;
    0x20uy; 0xa3uy; 0xb0uy; 0xfduy; 0x7auy; 0x8cuy; 0x6cuy; 0x90uy;
    0xe7uy; 0x3fuy; 0x0euy; 0x05uy; 0x4buy; 0xc2uy; 0xbfuy; 0x5duy
  ] in
  assert_norm(List.Tot.length l == 32);
  normalize_term l

let t1_input_ourOneTimePrivKey : lbytes 32 =
  of_list t1_input_ourOneTimePrivKey_list

inline_for_extraction noextract let t1_input_theirIdentityPubKey_list :  l:list uint8{List.Tot.length l == 33} =
  [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
    0x05uy; 0x9cuy; 0x21uy; 0x97uy; 0xbeuy; 0x51uy; 0xbauy; 0xe7uy;
    0x03uy; 0xaeuy; 0x2euy; 0xdduy; 0x26uy; 0xb6uy; 0xffuy; 0x2buy;
    0x03uy; 0xd5uy; 0x89uy; 0xefuy; 0x48uy; 0x51uy; 0xbeuy; 0x33uy;
    0xa3uy; 0xf8uy; 0xd9uy; 0x23uy; 0xaduy; 0x86uy; 0xa6uy; 0xb4uy;
    0x39uy
  ] in
  assert_norm(List.Tot.length l == 33);
  normalize_term l

let t1_input_theirIdentityPubKey : lbytes 33 =
  of_list t1_input_theirIdentityPubKey_list

inline_for_extraction noextract let t1_input_theirSignedPubKey_list : l:list uint8{List.Tot.length l == 33} =
  [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
    0x05uy; 0xa9uy; 0xecuy; 0xf6uy; 0x66uy; 0xecuy; 0x55uy; 0xfcuy;
    0x27uy; 0x98uy; 0x8euy; 0xccuy; 0x41uy; 0x7duy; 0xb0uy; 0xd6uy;
    0x2duy; 0xd5uy; 0xe1uy; 0xfauy; 0x75uy; 0x1duy; 0xa1uy; 0xf7uy;
    0xa2uy; 0xdduy; 0x2euy; 0xcauy; 0x0duy; 0x14uy; 0xc8uy; 0xbduy;
    0x46uy
  ] in
  assert_norm(List.Tot.length l == 33);
  normalize_term l

let t1_input_theirSignedPubKey : lbytes 33 =
  of_list t1_input_theirSignedPubKey_list

inline_for_extraction noextract let t1_input_theirOneTimePubKey_list : l:list uint8{List.Tot.length l == 33} =
  [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
    0x05uy; 0x2cuy; 0xd5uy; 0x00uy; 0x4auy; 0x4cuy; 0x31uy; 0xdduy;
    0x7buy; 0x89uy; 0xb7uy; 0xfcuy; 0x80uy; 0xccuy; 0x3euy; 0x62uy;
    0xabuy; 0xcfuy; 0x9cuy; 0xf1uy; 0xafuy; 0x01uy; 0x4cuy; 0x93uy;
    0xecuy; 0x45uy; 0x89uy; 0xf7uy; 0xcauy; 0x3euy; 0x79uy; 0xe6uy;
    0x5cuy
  ] in
  assert_norm(List.Tot.length l == 33);
  normalize_term l

let t1_input_theirOneTimePubKey : lbytes 33 =
  of_list t1_input_theirOneTimePubKey_list

inline_for_extraction noextract let t1_output_rootKey_list : l:list uint8{List.Tot.length l == 32} =
  [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
    0xfauy; 0x60uy; 0xbcuy; 0x6duy; 0x0duy; 0xf9uy; 0x0cuy; 0xf1uy;
    0x52uy; 0x2duy; 0xaduy; 0x25uy; 0x6duy; 0x0euy; 0x82uy; 0xe6uy;
    0xcauy; 0x6duy; 0x21uy; 0xb2uy; 0x6fuy; 0xe1uy; 0x42uy; 0x82uy;
    0x02uy; 0x19uy; 0x10uy; 0xcbuy; 0xbeuy; 0x88uy; 0x31uy; 0x4duy
  ] in
  assert_norm(List.Tot.length l == 32);
  normalize_term l

let t1_output_rootKey : lbytes 32 =
  of_list t1_output_rootKey_list

inline_for_extraction noextract let t1_output_chainKey_list :  l:list uint8{List.Tot.length l == 32} =
  [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
    0xd2uy; 0x1buy; 0xdeuy; 0xb5uy; 0x79uy; 0xfauy; 0x98uy; 0x2euy;
    0x9auy; 0xa9uy; 0xc8uy; 0x34uy; 0x5buy; 0x57uy; 0xd4uy; 0x5duy;
    0xdbuy; 0x68uy; 0x80uy; 0xecuy; 0xe0uy; 0xa7uy; 0xd9uy; 0xd1uy;
    0x72uy; 0xe7uy; 0x51uy; 0x06uy; 0x2duy; 0xb6uy; 0x92uy; 0x96uy
  ] in
  assert_norm(List.Tot.length l == 32);
  normalize_term l

let t1_output_chainKey : lbytes 32 =
  of_list t1_output_chainKey_list

inline_for_extraction noextract let t2_input_ourIdentityPrivKey_list : l:list uint8{List.Tot.length l == 32} =
  [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
    0x58uy; 0xc9uy; 0xfbuy; 0x2euy; 0xc2uy; 0xc6uy; 0xb1uy; 0x3euy;
    0x27uy; 0x9euy; 0x7duy; 0xb5uy; 0x7cuy; 0xe8uy; 0x37uy; 0xc0uy;
    0x2auy; 0xacuy; 0x15uy; 0x31uy; 0x50uy; 0x4fuy; 0x71uy; 0x13uy;
    0x0duy; 0x16uy; 0x7cuy; 0xc8uy; 0xfbuy; 0x25uy; 0xa8uy; 0x57uy
  ] in
  assert_norm(List.Tot.length l == 32);
  normalize_term l

let t2_input_ourIdentityPrivKey : lbytes 32 =
  of_list t2_input_ourIdentityPrivKey_list

inline_for_extraction noextract let t2_input_ourSignedPrivKey_list : l:list uint8{List.Tot.length l == 32} =
  [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
    0x88uy; 0x8buy; 0x3fuy; 0x14uy; 0xafuy; 0xf8uy; 0x0euy; 0x36uy;
    0xbbuy; 0x2duy; 0x2cuy; 0xc2uy; 0x6auy; 0x72uy; 0xdauy; 0x2euy;
    0x1auy; 0x99uy; 0x33uy; 0x09uy; 0x62uy; 0xf5uy; 0x06uy; 0x6cuy;
    0x7cuy; 0x1duy; 0xdeuy; 0xd1uy; 0x26uy; 0x2cuy; 0xa6uy; 0x65uy
  ] in
  assert_norm(List.Tot.length l == 32);
  normalize_term l

let t2_input_ourSignedPrivKey : lbytes 32 =
  of_list t2_input_ourSignedPrivKey_list

inline_for_extraction noextract let t2_input_ourEphemeralPrivKey_list : l:list uint8{List.Tot.length l == 32} =
  [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
    0x88uy; 0xd9uy; 0xa1uy; 0x2euy; 0x7buy; 0x03uy; 0xafuy; 0xdauy;
    0xc4uy; 0x2euy; 0x49uy; 0xecuy; 0x9duy; 0x4euy; 0x54uy; 0x88uy;
    0xe1uy; 0xb1uy; 0xe6uy; 0xd4uy; 0x8cuy; 0x6euy; 0xefuy; 0x60uy;
    0x29uy; 0xe4uy; 0x5duy; 0xecuy; 0x09uy; 0xa9uy; 0xd5uy; 0x62uy
  ] in
  assert_norm(List.Tot.length l == 32);
  normalize_term l

let t2_input_ourEphemeralPrivKey : lbytes 32 =
  of_list t2_input_ourEphemeralPrivKey_list

inline_for_extraction noextract let t2_input_theirIdentityPubKey_list : l:list uint8{List.Tot.length l == 33} =
  [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
    0x05uy; 0x0auy; 0x6cuy; 0xf5uy; 0xe0uy; 0x75uy; 0xc9uy; 0x97uy;
    0x0fuy; 0x14uy; 0x86uy; 0x2duy; 0xb8uy; 0xa7uy; 0x03uy; 0xa6uy;
    0xc7uy; 0x61uy; 0xf5uy; 0x0buy; 0x51uy; 0x82uy; 0xd1uy; 0x78uy;
    0x74uy; 0x90uy; 0x89uy; 0x40uy; 0x55uy; 0x6auy; 0x22uy; 0x37uy;
    0x22uy
  ] in
  assert_norm(List.Tot.length l == 33);
  normalize_term l

let t2_input_theirIdentityPubKey : lbytes 33 =
  of_list t2_input_theirIdentityPubKey_list

inline_for_extraction noextract let t2_input_theirOneTimePubKey_list : l:list uint8{List.Tot.length l == 33} =
  [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
    0x05uy; 0x8auy; 0x49uy; 0xfauy; 0x8auy; 0x94uy; 0x22uy; 0x4auy;
    0xaauy; 0x8fuy; 0x58uy; 0x73uy; 0x40uy; 0x4euy; 0x01uy; 0x71uy;
    0x0fuy; 0xf9uy; 0xefuy; 0x02uy; 0x16uy; 0x9auy; 0x75uy; 0xf9uy;
    0x0auy; 0xf4uy; 0xfbuy; 0xbcuy; 0x60uy; 0x07uy; 0x96uy; 0xe0uy;
    0x52uy
  ] in
  assert_norm(List.Tot.length l == 33);
  normalize_term l

let t2_input_theirOneTimePubKey : lbytes 33 =
  of_list t2_input_theirOneTimePubKey_list

inline_for_extraction noextract let t2_output_rootKey_list : l:list uint8{List.Tot.length l == 32} =
  [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
    0x99uy; 0xcauy; 0x9fuy; 0xe1uy; 0xd0uy; 0x94uy; 0x6fuy; 0x20uy;
    0x61uy; 0xaduy; 0xcauy; 0x39uy; 0x4cuy; 0x2euy; 0x57uy; 0x4fuy;
    0xb3uy; 0xb5uy; 0x25uy; 0xe2uy; 0xeeuy; 0x1buy; 0x9fuy; 0x94uy;
    0x69uy; 0x1fuy; 0xd1uy; 0xeeuy; 0x75uy; 0xa3uy; 0x77uy; 0x01uy
  ] in
  assert_norm(List.Tot.length l == 32);
  normalize_term l

let t2_output_rootKey : lbytes 32 =
  of_list t2_output_rootKey_list

inline_for_extraction noextract let t3_input_ourIdentityPubKey_list : l:list uint8{List.Tot.length l == 33} =
  [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
    0x05uy; 0x0auy; 0x6cuy; 0xf5uy; 0xe0uy; 0x75uy; 0xc9uy; 0x97uy;
    0x0fuy; 0x14uy; 0x86uy; 0x2duy; 0xb8uy; 0xa7uy; 0x03uy; 0xa6uy;
    0xc7uy; 0x61uy; 0xf5uy; 0x0buy; 0x51uy; 0x82uy; 0xd1uy; 0x78uy;
    0x74uy; 0x90uy; 0x89uy; 0x40uy; 0x55uy; 0x6auy; 0x22uy; 0x37uy;
    0x22uy
  ] in
  assert_norm(List.Tot.length l == 33);
  normalize_term l

let t3_input_ourIdentityPubKey : lbytes 33 =
  of_list t3_input_ourIdentityPubKey_list

inline_for_extraction noextract let t3_input_theirIdentityPubKey_list : l:list uint8{List.Tot.length l == 33} =
  [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
    0x05uy; 0x9cuy; 0x21uy; 0x97uy; 0xbeuy; 0x51uy; 0xbauy; 0xe7uy;
    0x03uy; 0xaeuy; 0x2euy; 0xdduy; 0x26uy; 0xb6uy; 0xffuy; 0x2buy;
    0x03uy; 0xd5uy; 0x89uy; 0xefuy; 0x48uy; 0x51uy; 0xbeuy; 0x33uy;
    0xa3uy; 0xf8uy; 0xd9uy; 0x23uy; 0xaduy; 0x86uy; 0xa6uy; 0xb4uy;
    0x39uy
  ] in
  assert_norm(List.Tot.length l == 33);
  normalize_term l

let t3_input_theirIdentityPubKey : lbytes 33 =
  of_list t3_input_theirIdentityPubKey_list

inline_for_extraction noextract let t3_input_msgKey_list :  l:list uint8{List.Tot.length l == 32} =
  [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
    0x8fuy; 0xa1uy; 0xfduy; 0xa3uy; 0xaeuy; 0x1duy; 0x8auy; 0x50uy;
    0x1buy; 0x28uy; 0xdcuy; 0x11uy; 0xdfuy; 0xcbuy; 0xb4uy; 0x81uy;
    0x90uy; 0xbduy; 0xd7uy; 0x5cuy; 0x1duy; 0x8duy; 0xa9uy; 0x5duy;
    0xd7uy; 0xecuy; 0xbeuy; 0xa3uy; 0x16uy; 0xa3uy; 0x58uy; 0x1cuy
  ] in
  assert_norm(List.Tot.length l == 32);
  normalize_term l

let t3_input_msgKey : lbytes 32 =
  of_list t3_input_msgKey_list

inline_for_extraction noextract let t3_input_ourEphemeralPubKey_list:  l:list uint8{List.Tot.length l == 33} =
  [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
    0x05uy; 0x88uy; 0x3auy; 0xb5uy; 0x8buy; 0x3euy; 0xb6uy; 0xdbuy;
    0x93uy; 0xb3uy; 0x2buy; 0xf9uy; 0x18uy; 0x99uy; 0xa5uy; 0xb5uy;
    0x17uy; 0x5euy; 0x7buy; 0x21uy; 0xe9uy; 0x6fuy; 0xffuy; 0x2cuy;
    0xecuy; 0x02uy; 0xc8uy; 0x3duy; 0xffuy; 0x16uy; 0xbauy; 0x1buy;
    0x27uy
  ] in
  assert_norm(List.Tot.length l == 33);
  normalize_term l

let t3_input_ourEphemeralPubKey: lbytes 33 =
  of_list t3_input_ourEphemeralPubKey_list

inline_for_extraction noextract let t3_input_previousCounter : size_nat = 0

inline_for_extraction noextract let t3_input_counter : size_nat = 0

inline_for_extraction noextract let t3_input_msg_list: l:list uint8{List.Tot.length l == 159} =
  [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
    0x0auy; 0x01uy; 0x41uy; 0x80uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy
  ] in
  assert_norm(List.Tot.length l == 159);
  normalize_term l

let t3_input_msg: lbytes 159 =
  of_list t3_input_msg_list

inline_for_extraction noextract let t3_output_result_list: l:list uint8{List.Tot.length l == 211} =
  [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
    0x33uy; 0x0auy; 0x21uy; 0x05uy; 0x88uy; 0x3auy; 0xb5uy; 0x8buy;
    0x3euy; 0xb6uy; 0xdbuy; 0x93uy; 0xb3uy; 0x2buy; 0xf9uy; 0x18uy;
    0x99uy; 0xa5uy; 0xb5uy; 0x17uy; 0x5euy; 0x7buy; 0x21uy; 0xe9uy;
    0x6fuy; 0xffuy; 0x2cuy; 0xecuy; 0x02uy; 0xc8uy; 0x3duy; 0xffuy;
    0x16uy; 0xbauy; 0x1buy; 0x27uy; 0x10uy; 0x00uy; 0x18uy; 0x00uy;
    0x22uy; 0xa0uy; 0x01uy; 0x3cuy; 0x5duy; 0x07uy; 0x0duy; 0x1buy;
    0x75uy; 0xc4uy; 0x18uy; 0xceuy; 0xf7uy; 0x69uy; 0xbduy; 0x73uy;
    0x78uy; 0xa5uy; 0x89uy; 0x69uy; 0x53uy; 0x7auy; 0x00uy; 0xe0uy;
    0xffuy; 0x60uy; 0xcbuy; 0xb9uy; 0x9duy; 0xefuy; 0xb4uy; 0x86uy;
    0xfcuy; 0xfbuy; 0x43uy; 0x38uy; 0x42uy; 0x64uy; 0xdauy; 0x4euy;
    0xa9uy; 0x82uy; 0x1cuy; 0x13uy; 0x36uy; 0xf0uy; 0x2duy; 0x98uy;
    0x8duy; 0xa3uy; 0x89uy; 0x44uy; 0x45uy; 0x33uy; 0x31uy; 0xc4uy;
    0xb3uy; 0x01uy; 0x81uy; 0x70uy; 0x4cuy; 0xbcuy; 0xecuy; 0x5auy;
    0x79uy; 0x2auy; 0xb8uy; 0x7cuy; 0x5cuy; 0xcfuy; 0xf2uy; 0x56uy;
    0xe0uy; 0xb4uy; 0xd6uy; 0x1buy; 0xa6uy; 0xa3uy; 0x0auy; 0x69uy;
    0x64uy; 0x78uy; 0x38uy; 0x75uy; 0x01uy; 0x88uy; 0x82uy; 0xe6uy;
    0x6buy; 0xfbuy; 0xd9uy; 0x44uy; 0x5auy; 0xc4uy; 0x4fuy; 0xeeuy;
    0x9duy; 0xc6uy; 0x7euy; 0xdcuy; 0x2auy; 0xd9uy; 0xdeuy; 0x78uy;
    0xaduy; 0xbeuy; 0x0euy; 0xb7uy; 0xe9uy; 0xcbuy; 0x99uy; 0x02uy;
    0x72uy; 0x18uy; 0x3cuy; 0xe5uy; 0xfauy; 0xc6uy; 0x82uy; 0xeeuy;
    0x51uy; 0x06uy; 0xf6uy; 0x7duy; 0x73uy; 0x2cuy; 0xd1uy; 0x6duy;
    0xfbuy; 0x73uy; 0x12uy; 0x39uy; 0x59uy; 0x0buy; 0xa6uy; 0x7duy;
    0xc8uy; 0x27uy; 0xe8uy; 0x49uy; 0xc4uy; 0x9auy; 0x9fuy; 0xb5uy;
    0xeduy; 0x8euy; 0xeduy; 0x41uy; 0xd8uy; 0x5duy; 0x5euy; 0x6duy;
    0xe3uy; 0x29uy; 0x4euy; 0x74uy; 0xf3uy; 0x52uy; 0x4cuy; 0x64uy;
    0x89uy; 0xc2uy; 0xf2uy; 0x54uy; 0x82uy; 0xffuy; 0x52uy; 0xf9uy;
    0xeauy; 0x29uy; 0xc9uy
  ] in
  assert_norm(List.Tot.length l == 211);
  normalize_term l

let t3_output_result: lbytes 211 =
  of_list t3_output_result_list

inline_for_extraction noextract let t4_input_ourIdentityPubKey_list : l:list uint8{List.Tot.length l == 33} =
  [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
    0x05uy; 0x0auy; 0x6cuy; 0xf5uy; 0xe0uy; 0x75uy; 0xc9uy; 0x97uy;
    0x0fuy; 0x14uy; 0x86uy; 0x2duy; 0xb8uy; 0xa7uy; 0x03uy; 0xa6uy;
    0xc7uy; 0x61uy; 0xf5uy; 0x0buy; 0x51uy; 0x82uy; 0xd1uy; 0x78uy;
    0x74uy; 0x90uy; 0x89uy; 0x40uy; 0x55uy; 0x6auy; 0x22uy; 0x37uy;
    0x22uy
  ] in
  assert_norm(List.Tot.length l == 33);
  normalize_term l

let t4_input_ourIdentityPubKey : lbytes 33 =
  of_list t4_input_ourIdentityPubKey_list

inline_for_extraction noextract let t4_input_theirIdentityPubKey_list : l:list uint8{List.Tot.length l == 33} =
  [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
    0x05uy; 0x9cuy; 0x21uy; 0x97uy; 0xbeuy; 0x51uy; 0xbauy; 0xe7uy;
    0x03uy; 0xaeuy; 0x2euy; 0xdduy; 0x26uy; 0xb6uy; 0xffuy; 0x2buy;
    0x03uy; 0xd5uy; 0x89uy; 0xefuy; 0x48uy; 0x51uy; 0xbeuy; 0x33uy;
    0xa3uy; 0xf8uy; 0xd9uy; 0x23uy; 0xaduy; 0x86uy; 0xa6uy; 0xb4uy;
    0x39uy
  ] in
  assert_norm(List.Tot.length l == 33);
  normalize_term l

let t4_input_theirIdentityPubKey : lbytes 33 =
  of_list t4_input_theirIdentityPubKey_list

inline_for_extraction noextract let t4_input_msgKey_list : l:list uint8{List.Tot.length l == 32} =
  [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
    0xe1uy; 0x09uy; 0x15uy; 0x98uy; 0x39uy; 0xd7uy; 0x3cuy; 0x7auy;
    0xc0uy; 0x28uy; 0x25uy; 0xdduy; 0xf1uy; 0x0duy; 0x0buy; 0x75uy;
    0x4fuy; 0x03uy; 0xdfuy; 0x8euy; 0x67uy; 0x42uy; 0x3fuy; 0x21uy;
    0x1fuy; 0x7buy; 0xa2uy; 0x17uy; 0x50uy; 0x73uy; 0xdcuy; 0x83uy
  ] in
  assert_norm(List.Tot.length l == 32);
  normalize_term l

let t4_input_msgKey : lbytes 32 =
  of_list t4_input_msgKey_list

inline_for_extraction noextract let t4_input_ourEphemeralPubKey_list : l:list uint8{List.Tot.length l == 33} =
  [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
    0x05uy; 0x88uy; 0x3auy; 0xb5uy; 0x8buy; 0x3euy; 0xb6uy; 0xdbuy;
    0x93uy; 0xb3uy; 0x2buy; 0xf9uy; 0x18uy; 0x99uy; 0xa5uy; 0xb5uy;
    0x17uy; 0x5euy; 0x7buy; 0x21uy; 0xe9uy; 0x6fuy; 0xffuy; 0x2cuy;
    0xecuy; 0x02uy; 0xc8uy; 0x3duy; 0xffuy; 0x16uy; 0xbauy; 0x1buy;
    0x27uy
  ] in
  assert_norm(List.Tot.length l == 33);
  normalize_term l

let t4_input_ourEphemeralPubKey : lbytes 33 =
  of_list t4_input_ourEphemeralPubKey_list

inline_for_extraction noextract let t4_input_msg_list : l:list uint8{List.Tot.length l == 159} =
  [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
    0x0auy; 0x01uy; 0x42uy; 0x80uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy
  ] in
  assert_norm(List.Tot.length l == 159);
  normalize_term l

let t4_input_msg : lbytes 159 =
  of_list t4_input_msg_list

inline_for_extraction noextract let t4_input_previousCounter : size_nat = 0

inline_for_extraction noextract let t4_input_counter : size_nat = 1

inline_for_extraction noextract let t4_output_result_list : l:list uint8{List.Tot.length l == 211} =
  [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
    0x33uy; 0x0auy; 0x21uy; 0x05uy; 0x88uy; 0x3auy; 0xb5uy; 0x8buy;
    0x3euy; 0xb6uy; 0xdbuy; 0x93uy; 0xb3uy; 0x2buy; 0xf9uy; 0x18uy;
    0x99uy; 0xa5uy; 0xb5uy; 0x17uy; 0x5euy; 0x7buy; 0x21uy; 0xe9uy;
    0x6fuy; 0xffuy; 0x2cuy; 0xecuy; 0x02uy; 0xc8uy; 0x3duy; 0xffuy;
    0x16uy; 0xbauy; 0x1buy; 0x27uy; 0x10uy; 0x01uy; 0x18uy; 0x00uy;
    0x22uy; 0xa0uy; 0x01uy; 0x25uy; 0x6auy; 0xaeuy; 0x85uy; 0xbauy;
    0xbfuy; 0x8cuy; 0x08uy; 0x08uy; 0xf7uy; 0x5euy; 0x08uy; 0xbfuy;
    0x10uy; 0xa6uy; 0x3fuy; 0x7fuy; 0x3auy; 0xeauy; 0x97uy; 0x32uy;
    0x4cuy; 0x25uy; 0x83uy; 0xd7uy; 0x77uy; 0xf6uy; 0x09uy; 0xdfuy;
    0x49uy; 0x3duy; 0x7duy; 0x45uy; 0x23uy; 0x2cuy; 0x88uy; 0x83uy;
    0xc3uy; 0xe1uy; 0x11uy; 0x8fuy; 0xbcuy; 0x29uy; 0xb6uy; 0x31uy;
    0x8auy; 0x30uy; 0x91uy; 0xaeuy; 0x57uy; 0xfeuy; 0xd4uy; 0xf1uy;
    0xc5uy; 0x44uy; 0x58uy; 0xc6uy; 0xbbuy; 0x83uy; 0x2fuy; 0xbbuy;
    0x35uy; 0xf2uy; 0x49uy; 0x33uy; 0xcbuy; 0x79uy; 0x76uy; 0x5duy;
    0x00uy; 0xf4uy; 0xa1uy; 0x61uy; 0xe2uy; 0x87uy; 0x7auy; 0x5auy;
    0x21uy; 0xa2uy; 0x65uy; 0x92uy; 0xcduy; 0xb0uy; 0xaauy; 0x8auy;
    0x2fuy; 0x70uy; 0xf5uy; 0xfbuy; 0xe8uy; 0xc6uy; 0x01uy; 0xecuy;
    0xdfuy; 0xf0uy; 0xbeuy; 0xf1uy; 0xb7uy; 0x33uy; 0xd7uy; 0xfduy;
    0x0cuy; 0xb7uy; 0xb7uy; 0xd8uy; 0xfcuy; 0x1euy; 0x45uy; 0xf7uy;
    0x9cuy; 0x01uy; 0x6cuy; 0x8fuy; 0x90uy; 0x44uy; 0x92uy; 0x39uy;
    0xcauy; 0x1auy; 0x04uy; 0xb3uy; 0x74uy; 0x53uy; 0x8fuy; 0x27uy;
    0x60uy; 0xeeuy; 0xf4uy; 0x31uy; 0x27uy; 0xdduy; 0xc9uy; 0xa6uy;
    0x43uy; 0x9cuy; 0x6cuy; 0xecuy; 0xa5uy; 0xfauy; 0xf5uy; 0x96uy;
    0x2fuy; 0xb2uy; 0x6duy; 0x72uy; 0x48uy; 0x25uy; 0x7duy; 0x4duy;
    0x5euy; 0xe3uy; 0xfeuy; 0x4cuy; 0xf8uy; 0x79uy; 0x5auy; 0xccuy;
    0x55uy; 0x57uy; 0x18uy; 0x55uy; 0x8euy; 0x53uy; 0x17uy; 0xf6uy;
    0x18uy; 0x82uy; 0x83uy
  ] in
  assert_norm(List.Tot.length l == 211);
  normalize_term l

let t4_output_result : lbytes 211 =
  of_list t4_output_result_list

inline_for_extraction noextract let t4_output_chainKey_list : l:list uint8{List.Tot.length l == 32} =
  [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
    0x30uy; 0x25uy; 0xbcuy; 0x12uy; 0xa6uy; 0xa3uy; 0x22uy; 0xfduy;
    0x6duy; 0xd2uy; 0x25uy; 0x4auy; 0xb9uy; 0xaauy; 0x8duy; 0xc0uy;
    0x5duy; 0x07uy; 0xdauy; 0x9auy; 0x67uy; 0x8fuy; 0x06uy; 0xb5uy;
    0x9auy; 0xceuy; 0xaduy; 0x5buy; 0x52uy; 0xf9uy; 0x87uy; 0x94uy
  ] in
  assert_norm(List.Tot.length l == 32);
  normalize_term l

let t4_output_chainKey : lbytes 32 =
  of_list t4_output_chainKey_list

inline_for_extraction noextract let t5_input_ourIdentityPubKey_list : l:list uint8{List.Tot.length l == 33} =
  [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
    0x05uy; 0x0auy; 0x6cuy; 0xf5uy; 0xe0uy; 0x75uy; 0xc9uy; 0x97uy;
    0x0fuy; 0x14uy; 0x86uy; 0x2duy; 0xb8uy; 0xa7uy; 0x03uy; 0xa6uy;
    0xc7uy; 0x61uy; 0xf5uy; 0x0buy; 0x51uy; 0x82uy; 0xd1uy; 0x78uy;
    0x74uy; 0x90uy; 0x89uy; 0x40uy; 0x55uy; 0x6auy; 0x22uy; 0x37uy;
    0x22uy
  ] in
  assert_norm(List.Tot.length l == 33);
  normalize_term l

let t5_input_ourIdentityPubKey : lbytes 33 =
  of_list t5_input_ourIdentityPubKey_list

inline_for_extraction noextract let t5_input_theirIdentityPubKey_list : l:list uint8{List.Tot.length l == 33} =
  [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
    0x05uy; 0x9cuy; 0x21uy; 0x97uy; 0xbeuy; 0x51uy; 0xbauy; 0xe7uy;
    0x03uy; 0xaeuy; 0x2euy; 0xdduy; 0x26uy; 0xb6uy; 0xffuy; 0x2buy;
    0x03uy; 0xd5uy; 0x89uy; 0xefuy; 0x48uy; 0x51uy; 0xbeuy; 0x33uy;
    0xa3uy; 0xf8uy; 0xd9uy; 0x23uy; 0xaduy; 0x86uy; 0xa6uy; 0xb4uy;
    0x39uy
  ] in
  assert_norm(List.Tot.length l == 33);
  normalize_term l

let t5_input_theirIdentityPubKey : lbytes 33 =
  of_list t5_input_theirIdentityPubKey_list

inline_for_extraction noextract let t5_input_remoteEphemeralKey_list : l:list uint8{List.Tot.length l == 33} =
  [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
    0x05uy; 0xbcuy; 0x81uy; 0xf1uy; 0x34uy; 0x8auy; 0x1duy; 0x06uy;
    0x5buy; 0x2buy; 0xd2uy; 0x77uy; 0x6euy; 0xdbuy; 0x9fuy; 0x29uy;
    0xbcuy; 0x41uy; 0x50uy; 0x39uy; 0x9duy; 0xb3uy; 0x5cuy; 0x1duy;
    0x87uy; 0xdcuy; 0x25uy; 0x8buy; 0x94uy; 0x89uy; 0x4buy; 0xc5uy;
    0x7auy
  ] in
  assert_norm(List.Tot.length l == 33);
  normalize_term l

let t5_input_remoteEphemeralKey : lbytes 33 =
  of_list t5_input_remoteEphemeralKey_list

inline_for_extraction noextract let t5_input_messageKey_list : l:list uint8{List.Tot.length l == 32} =
  [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
    0x48uy; 0x5auy; 0x28uy; 0x74uy; 0x19uy; 0x6buy; 0x3fuy; 0xdauy;
    0xd6uy; 0x5fuy; 0x00uy; 0xebuy; 0xe1uy; 0x2fuy; 0xa7uy; 0xdfuy;
    0x20uy; 0x20uy; 0x82uy; 0x9cuy; 0xc7uy; 0x8auy; 0xbauy; 0xa1uy;
    0x85uy; 0x08uy; 0x87uy; 0xceuy; 0xf3uy; 0x12uy; 0x81uy; 0x64uy;
  ] in
  assert_norm(List.Tot.length l == 32);
  normalize_term l

let t5_input_messageKey : lbytes 32 =
  of_list t5_input_messageKey_list

inline_for_extraction noextract let t5_input_counter : size_nat = 0

inline_for_extraction noextract let t5_input_previousCounter : size_nat = 0

inline_for_extraction noextract let t5_input_ciphertext_list : l:list uint8{List.Tot.length l == 160} =
  [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
    0xc9uy; 0x3auy; 0xf1uy; 0x10uy; 0x76uy; 0x34uy; 0xd9uy; 0xeauy;
    0xa1uy; 0x51uy; 0x6auy; 0x4fuy; 0x8euy; 0x95uy; 0xc6uy; 0xa4uy;
    0x54uy; 0xc2uy; 0x73uy; 0x13uy; 0xb3uy; 0x88uy; 0x30uy; 0x70uy;
    0x9euy; 0xb8uy; 0x63uy; 0x60uy; 0x8fuy; 0x08uy; 0xf2uy; 0xf3uy;
    0xa5uy; 0x98uy; 0xffuy; 0x8fuy; 0x55uy; 0x86uy; 0x45uy; 0x42uy;
    0x7fuy; 0x7buy; 0x6euy; 0xa8uy; 0xe1uy; 0x82uy; 0xe4uy; 0x0fuy;
    0x7buy; 0x4auy; 0x92uy; 0xceuy; 0x03uy; 0x25uy; 0xf2uy; 0xe2uy;
    0x2fuy; 0x76uy; 0xf3uy; 0x6fuy; 0x69uy; 0x54uy; 0xf6uy; 0xf3uy;
    0x91uy; 0xdduy; 0x21uy; 0xd2uy; 0xcauy; 0xd1uy; 0x2euy; 0x5buy;
    0x62uy; 0x0euy; 0x75uy; 0xb9uy; 0x91uy; 0xe6uy; 0x9duy; 0xf8uy;
    0x82uy; 0x1auy; 0xb0uy; 0xe8uy; 0x26uy; 0xe3uy; 0xcbuy; 0x2auy;
    0xe1uy; 0xc7uy; 0xa1uy; 0xfbuy; 0x8euy; 0xd7uy; 0x22uy; 0x13uy;
    0xe3uy; 0x6fuy; 0xc5uy; 0x08uy; 0xcauy; 0x1fuy; 0x0auy; 0x92uy;
    0xebuy; 0xe2uy; 0x08uy; 0x95uy; 0x35uy; 0xb5uy; 0xd5uy; 0xe1uy;
    0xb3uy; 0x4euy; 0xaeuy; 0x5fuy; 0x91uy; 0x49uy; 0x7buy; 0xd0uy;
    0x72uy; 0xdeuy; 0x47uy; 0xdeuy; 0x32uy; 0x91uy; 0xbauy; 0x78uy;
    0xa6uy; 0xfduy; 0x67uy; 0xd3uy; 0xf8uy; 0xf3uy; 0xf2uy; 0x0duy;
    0x04uy; 0xabuy; 0x3auy; 0x11uy; 0x59uy; 0xdfuy; 0x8fuy; 0x36uy;
    0xefuy; 0x7euy; 0x46uy; 0x96uy; 0x84uy; 0x7euy; 0x32uy; 0xceuy;
    0x6buy; 0xe0uy; 0x7euy; 0xdbuy; 0x93uy; 0x76uy; 0x3auy; 0x22uy
  ] in
  assert_norm(List.Tot.length l == 160);
  normalize_term l

let t5_input_ciphertext : lbytes 160 =
  of_list t5_input_ciphertext_list

inline_for_extraction noextract let t5_input_macTag_list : l:list uint8{List.Tot.length l == 8} =
  [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
    0x26uy; 0xc8uy; 0x7fuy; 0xefuy; 0xf8uy; 0xccuy; 0x48uy; 0x27uy
  ] in
  assert_norm(List.Tot.length l == 8);
  normalize_term l

let t5_input_macTag : lbytes 8 =
  of_list t5_input_macTag_list

inline_for_extraction noextract let t5_output_plaintext_list : l:list uint8{List.Tot.length l == 159} =
  [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
    0x0auy; 0x01uy; 0x43uy; 0x80uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy
  ] in
  assert_norm(List.Tot.length l == 159);
  normalize_term l

let t5_output_plaintext : lbytes 159 =
  of_list t5_output_plaintext_list

inline_for_extraction noextract let t6_input_ourIdentityPubKey_list :  l:list uint8{List.Tot.length l == 33} =
  [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
    0x05uy; 0x9cuy; 0x21uy; 0x97uy; 0xbeuy; 0x51uy; 0xbauy; 0xe7uy;
    0x03uy; 0xaeuy; 0x2euy; 0xdduy; 0x26uy; 0xb6uy; 0xffuy; 0x2buy;
    0x03uy; 0xd5uy; 0x89uy; 0xefuy; 0x48uy; 0x51uy; 0xbeuy; 0x33uy;
    0xa3uy; 0xf8uy; 0xd9uy; 0x23uy; 0xaduy; 0x86uy; 0xa6uy; 0xb4uy;
    0x39uy
  ] in
  assert_norm(List.Tot.length l == 33);
  normalize_term l

let t6_input_ourIdentityPubKey : lbytes 33 =
  of_list t6_input_ourIdentityPubKey_list

inline_for_extraction noextract let t6_input_theirIdentityPubKey_list : l:list uint8{List.Tot.length l == 33} =
  [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
    0x05uy; 0x0auy; 0x6cuy; 0xf5uy; 0xe0uy; 0x75uy; 0xc9uy; 0x97uy;
    0x0fuy; 0x14uy; 0x86uy; 0x2duy; 0xb8uy; 0xa7uy; 0x03uy; 0xa6uy;
    0xc7uy; 0x61uy; 0xf5uy; 0x0buy; 0x51uy; 0x82uy; 0xd1uy; 0x78uy;
    0x74uy; 0x90uy; 0x89uy; 0x40uy; 0x55uy; 0x6auy; 0x22uy; 0x37uy;
    0x22uy
  ] in
  assert_norm(List.Tot.length l == 33);
  normalize_term l

let t6_input_theirIdentityPubKey : lbytes 33 =
  of_list t6_input_theirIdentityPubKey_list

inline_for_extraction noextract let t6_input_remoteEphemeralKey_list : l:list uint8{List.Tot.length l == 33} =
  [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
    0x05uy; 0x57uy; 0x6fuy; 0x3cuy; 0x29uy; 0x71uy; 0x7duy; 0xb7uy;
    0x5fuy; 0xfduy; 0x19uy; 0xa3uy; 0x71uy; 0x54uy; 0xd4uy; 0xd6uy;
    0xbeuy; 0xbauy; 0x8duy; 0x79uy; 0x6auy; 0x26uy; 0xc4uy; 0x24uy;
    0x47uy; 0x93uy; 0x13uy; 0x2fuy; 0x7euy; 0x6cuy; 0xb1uy; 0x80uy;
    0x49uy
  ] in
  assert_norm(List.Tot.length l == 33);
  normalize_term l

let t6_input_remoteEphemeralKey : lbytes 33 =
  of_list t6_input_remoteEphemeralKey_list

inline_for_extraction noextract let t6_input_messageKey_list : l:list uint8{List.Tot.length l == 32} =
  [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
    0xf4uy; 0x61uy; 0xaeuy; 0x54uy; 0x56uy; 0x43uy; 0x71uy; 0xc7uy;
    0x2cuy; 0x06uy; 0x73uy; 0x4fuy; 0xbfuy; 0x68uy; 0xeeuy; 0xefuy;
    0x1fuy; 0x5auy; 0x39uy; 0xcbuy; 0xa3uy; 0x27uy; 0xa5uy; 0x01uy;
    0xeeuy; 0x03uy; 0xb0uy; 0x0buy; 0x0fuy; 0xf5uy; 0x3auy; 0x38uy
  ] in
  assert_norm(List.Tot.length l == 32);
  normalize_term l

let t6_input_messageKey : lbytes 32 =
  of_list t6_input_messageKey_list

inline_for_extraction noextract let t6_input_counter : size_nat = 0

inline_for_extraction noextract let t6_input_previousCounter : size_nat = 1

inline_for_extraction noextract let t6_input_ciphertext_list : l:list uint8{List.Tot.length l == 160} =
  [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
    0xbduy; 0x13uy; 0x9auy; 0x95uy; 0x02uy; 0x1duy; 0x34uy; 0xd9uy;
    0xdfuy; 0x74uy; 0xd9uy; 0x9auy; 0xa8uy; 0x97uy; 0x98uy; 0x1auy;
    0xa6uy; 0x71uy; 0x8fuy; 0xd6uy; 0xb7uy; 0x2duy; 0x85uy; 0x67uy;
    0x89uy; 0x1auy; 0xffuy; 0xf9uy; 0x2cuy; 0x6euy; 0x35uy; 0x34uy;
    0xdeuy; 0xd0uy; 0xdeuy; 0x80uy; 0xbeuy; 0x7euy; 0x7cuy; 0x58uy;
    0x73uy; 0x0auy; 0x00uy; 0x1fuy; 0x2auy; 0xccuy; 0x1fuy; 0x1euy;
    0x64uy; 0x47uy; 0xf9uy; 0xcauy; 0x0auy; 0x99uy; 0x68uy; 0x1fuy;
    0x3fuy; 0x65uy; 0xd9uy; 0xa4uy; 0x07uy; 0x2fuy; 0x3auy; 0x1fuy;
    0xb9uy; 0x78uy; 0x74uy; 0x09uy; 0x18uy; 0xd3uy; 0xdbuy; 0x5cuy;
    0x34uy; 0x61uy; 0x70uy; 0xeduy; 0xb3uy; 0xbfuy; 0x8fuy; 0xecuy;
    0x2buy; 0x52uy; 0x36uy; 0x2euy; 0xdfuy; 0x71uy; 0x38uy; 0xf9uy;
    0x3cuy; 0xb2uy; 0x3auy; 0x3fuy; 0x17uy; 0xb0uy; 0xf4uy; 0x0buy;
    0xf9uy; 0x76uy; 0x9euy; 0x01uy; 0x27uy; 0x39uy; 0x55uy; 0xb1uy;
    0x4cuy; 0x20uy; 0xb6uy; 0x21uy; 0x2cuy; 0xbbuy; 0x1fuy; 0x66uy;
    0x5duy; 0x1auy; 0x7euy; 0x5euy; 0x77uy; 0x04uy; 0x37uy; 0xa5uy;
    0x3buy; 0x17uy; 0x27uy; 0xc1uy; 0x3buy; 0xcduy; 0x63uy; 0x9buy;
    0xf5uy; 0xbeuy; 0xbauy; 0x71uy; 0x89uy; 0x3buy; 0x8duy; 0xe4uy;
    0x35uy; 0x24uy; 0x4auy; 0xcduy; 0xdcuy; 0x42uy; 0xc3uy; 0xbauy;
    0x59uy; 0x2buy; 0x7duy; 0xebuy; 0xdauy; 0xcduy; 0xc4uy; 0xdeuy;
    0xa1uy; 0x2duy; 0xc7uy; 0xe4uy; 0xe6uy; 0x70uy; 0x75uy; 0x34uy
  ] in
  assert_norm(List.Tot.length l == 160);
  normalize_term l

let t6_input_ciphertext : lbytes 160 =
  of_list t6_input_ciphertext_list

inline_for_extraction noextract let t6_input_macTag_list : l:list uint8{List.Tot.length l == 8} =
  [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
    0x19uy; 0xbeuy; 0x04uy; 0x55uy; 0xe0uy; 0x04uy; 0x3fuy; 0x91uy
  ] in
  assert_norm(List.Tot.length l == 8);
  normalize_term l

let t6_input_macTag : lbytes 8 =
  of_list t6_input_macTag_list

inline_for_extraction noextract let t6_output_plaintext_list : l:list uint8{List.Tot.length l == 159} =
  [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
    0x0auy; 0x01uy; 0x45uy; 0x80uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy
  ] in
  assert_norm(List.Tot.length l == 159);
  normalize_term l

let t6_output_plaintext : lbytes 159 =
  of_list t6_output_plaintext_list

inline_for_extraction noextract let t7_input_identityPubKey_list : l:list uint8{List.Tot.length l == 33} =
  [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
    0x05uy; 0x9cuy; 0x21uy; 0x97uy; 0xbeuy; 0x51uy; 0xbauy; 0xe7uy;
    0x03uy; 0xaeuy; 0x2euy; 0xdduy; 0x26uy; 0xb6uy; 0xffuy; 0x2buy;
    0x03uy; 0xd5uy; 0x89uy; 0xefuy; 0x48uy; 0x51uy; 0xbeuy; 0x33uy;
    0xa3uy; 0xf8uy; 0xd9uy; 0x23uy; 0xaduy; 0x86uy; 0xa6uy; 0xb4uy;
    0x39uy
  ] in
  assert_norm(List.Tot.length l == 33);
  normalize_term l

let t7_input_identityPubKey : lbytes 33 =
  of_list t7_input_identityPubKey_list

inline_for_extraction noextract let t7_input_signedPubKey_list : l:list uint8{List.Tot.length l == 33} =
  [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
    0x05uy; 0xa9uy; 0xecuy; 0xf6uy; 0x66uy; 0xecuy; 0x55uy; 0xfcuy;
    0x27uy; 0x98uy; 0x8euy; 0xccuy; 0x41uy; 0x7duy; 0xb0uy; 0xd6uy;
    0x2duy; 0xd5uy; 0xe1uy; 0xfauy; 0x75uy; 0x1duy; 0xa1uy; 0xf7uy;
    0xa2uy; 0xdduy; 0x2euy; 0xcauy; 0x0duy; 0x14uy; 0xc8uy; 0xbduy;
    0x46uy
  ] in
  assert_norm(List.Tot.length l == 33);
  normalize_term l

let t7_input_signedPubKey : lbytes 33 =
  of_list t7_input_signedPubKey_list

inline_for_extraction noextract let t7_input_signature_list : l:list uint8{List.Tot.length l == 64} =
  [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
    0x0buy; 0x46uy; 0xfduy; 0xb2uy; 0x38uy; 0xf1uy; 0xe2uy; 0xdfuy;
    0x7buy; 0x28uy; 0xa9uy; 0x4buy; 0xa5uy; 0x75uy; 0xe5uy; 0x8buy;
    0x0auy; 0xa1uy; 0xd3uy; 0x77uy; 0xbbuy; 0x84uy; 0x36uy; 0x02uy;
    0xccuy; 0x8cuy; 0x2auy; 0x7cuy; 0xd3uy; 0x37uy; 0x70uy; 0xfduy;
    0xd7uy; 0x41uy; 0xf6uy; 0x5auy; 0x24uy; 0x0fuy; 0x7cuy; 0x30uy;
    0x86uy; 0xf0uy; 0x0fuy; 0x31uy; 0xdcuy; 0x4fuy; 0x3buy; 0x8cuy;
    0xeeuy; 0xabuy; 0x49uy; 0x83uy; 0x56uy; 0xf8uy; 0xd5uy; 0xe4uy;
    0xbfuy; 0xe6uy; 0xf2uy; 0xdduy; 0x3euy; 0xecuy; 0xa9uy; 0x8fuy
  ] in
  assert_norm(List.Tot.length l == 64);
  normalize_term l

let t7_input_signature : lbytes 64 =
  of_list t7_input_signature_list

inline_for_extraction noextract let t8_input_pubKey_list : l:list uint8{List.Tot.length l == 33} =
  [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
    0x05uy; 0xd1uy; 0xf1uy; 0xc4uy; 0x8auy; 0x74uy; 0xf0uy; 0x04uy;
    0xe8uy; 0xf3uy; 0x41uy; 0x4euy; 0x5auy; 0x2cuy; 0x81uy; 0x18uy;
    0x19uy; 0x23uy; 0xcauy; 0x5buy; 0xdauy; 0xaauy; 0x61uy; 0xa6uy;
    0x13uy; 0xf8uy; 0x77uy; 0xb2uy; 0xa6uy; 0x5duy; 0x0fuy; 0x52uy;
    0x30uy
  ] in
  assert_norm(List.Tot.length l == 33);
  normalize_term l

let t8_input_pubKey : lbytes 33 =
  of_list t8_input_pubKey_list

inline_for_extraction noextract let t8_input_privKey_list : l:list uint8{List.Tot.length l == 32} =
  [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
    0x38uy; 0x2auy; 0x38uy; 0x62uy; 0xa8uy; 0x0auy; 0x88uy; 0x22uy;
    0xd8uy; 0xaauy; 0x98uy; 0xa2uy; 0xc8uy; 0x0auy; 0x68uy; 0xe2uy;
    0x78uy; 0x2auy; 0xf8uy; 0xe2uy; 0xe8uy; 0x0auy; 0x48uy; 0xa2uy;
    0x18uy; 0xaauy; 0x58uy; 0x22uy; 0x08uy; 0x0auy; 0x28uy; 0x62uy
  ] in
  assert_norm(List.Tot.length l == 32);
  normalize_term l

let t8_input_privKey : lbytes 32 =
  of_list t8_input_privKey_list

inline_for_extraction noextract let t8_output_signature_list : l:list uint8{List.Tot.length l == 64} =
  [@inline_let]
  let l = List.Tot.Base.map u8_from_UInt8 [
    0xecuy; 0x06uy; 0xeauy; 0x4euy; 0xc7uy; 0x15uy; 0x61uy; 0x4cuy;
    0x78uy; 0x26uy; 0x5duy; 0xf8uy; 0x2auy; 0x40uy; 0xeduy; 0x1buy;
    0xdcuy; 0x07uy; 0x67uy; 0xd8uy; 0x71uy; 0x4duy; 0x59uy; 0x01uy;
    0xa9uy; 0xdfuy; 0x09uy; 0x7buy; 0x33uy; 0xfeuy; 0x61uy; 0xb4uy;
    0x9buy; 0x09uy; 0x3buy; 0xa4uy; 0xb3uy; 0x50uy; 0xb0uy; 0xfbuy;
    0x0duy; 0x35uy; 0x48uy; 0x05uy; 0x0buy; 0xeduy; 0xd6uy; 0x38uy;
    0x90uy; 0xb9uy; 0x52uy; 0xf6uy; 0xb2uy; 0x9auy; 0xcfuy; 0xecuy;
    0xf3uy; 0xeduy; 0x09uy; 0x3euy; 0xf7uy; 0xf9uy; 0xd8uy; 0x0fuy
  ] in
  assert_norm(List.Tot.length l == 64);
  normalize_term l

let t8_output_signature : lbytes 64 =
  of_list t8_output_signature_list

#set-options "--admit_smt_queries true"

let test_compare_buffers
  (msg:string)
  (expected:seq uint8)
  (computed:seq uint8) : All.ML bool =
  IO.print_string "\n";
  IO.print_string msg;
  IO.print_string "\nexpected (";
  IO.print_uint32_dec (UInt32.uint_to_t (length expected));
  IO.print_string "):\n";
  FStar.List.iter (fun a -> IO.print_uint8_hex_pad (u8_to_UInt8 a)) (to_list expected);
  IO.print_string "\n";
  IO.print_string "computed (";
  IO.print_uint32_dec (UInt32.uint_to_t (length computed));
  IO.print_string "):\n";
  FStar.List.iter (fun a -> IO.print_uint8_hex_pad (u8_to_UInt8 a)) (to_list computed);
  IO.print_string "\n";
  let result =
    for_all2 #uint8 #uint8 #(length computed) (fun x y -> uint_to_nat #U8 x = uint_to_nat #U8 y)
      computed expected
  in
  if result then IO.print_string "\nSuccess !\n"
  else IO.print_string "\nFailed !\n";
  result


let test () =
  IO.print_string "TEST 0: (Spec.Signal.Core.ratchet)";
  let t0_computed_rootKey, t0_computed_chainKey =
    Spec.Signal.Core.ratchet t0_input_rootKey t0_input_ourEphemeralPrivKey t0_input_theirEphemeralPubKey in
  let result0a = test_compare_buffers "0a. rootKey" t0_output_rootKey t0_computed_rootKey in
  let result0b = test_compare_buffers "0b. chainKey" t0_output_chainKey t0_computed_chainKey in

  IO.print_string "\n\nTEST 1: (Spec.Signal.Core.initiate)";
  let t1_computed_rootKey, t1_computed_chainKey =
    Spec.Signal.Core.initiate t1_input_ourIdentityPrivKey
			       t1_input_basePrivKey
                               t1_input_ourOneTimePrivKey
                               t1_input_theirIdentityPubKey
                               t1_input_theirSignedPubKey
                               (Some t1_input_theirOneTimePubKey) in

  let result1a = test_compare_buffers "1a. rootKey" t1_output_rootKey t1_computed_rootKey in
  let result1b = test_compare_buffers "1b. chainKey" t1_output_chainKey t1_computed_chainKey in

  IO.print_string "\n\nTEST 2: (Spec.Signal.Core.respond)";
  let t2_computed_rootKey =
    Spec.Signal.Core.respond t2_input_ourIdentityPrivKey
			     t2_input_ourSignedPrivKey
			     (Some t2_input_ourEphemeralPrivKey)
			     t2_input_theirIdentityPubKey
			     t2_input_theirOneTimePubKey in

  let result2 = test_compare_buffers "2. rootKey" t2_output_rootKey t2_computed_rootKey in


  IO.print_string "\n\nTEST 3: (Spec.Signal.Core.encrypt)\n";
  let t3_computed_result =
    Spec.Signal.Core.encrypt
      t3_input_ourIdentityPubKey
      t3_input_theirIdentityPubKey
      t3_input_msgKey
      t3_input_ourEphemeralPubKey
      t3_input_previousCounter
      t3_input_counter
      t3_input_msg
  in

  let result3 = test_compare_buffers "3. Ciphertext" t3_output_result t3_computed_result in


  IO.print_string "\n\nTEST 4: (Spec.Signal.Core.encrypt)\n";
  let t4_computed_result =
    Spec.Signal.Core.encrypt
      t4_input_ourIdentityPubKey
      t4_input_theirIdentityPubKey
      t4_input_msgKey
      t4_input_ourEphemeralPubKey
      t4_input_previousCounter
      t4_input_counter
      t4_input_msg
  in

  let result4 = test_compare_buffers "4. Ciphertext" t4_output_result t4_computed_result in

  IO.print_string "\n\nTEST 5: (Spec.Signal.Core.decrypt)\n";
  let t5_result =
    Spec.Signal.Core.decrypt
      t5_input_ourIdentityPubKey
      t5_input_theirIdentityPubKey
      t5_input_remoteEphemeralKey
      t5_input_messageKey
      t5_input_previousCounter
      t5_input_counter
      t5_input_ciphertext
      t5_input_macTag
  in
  let result5 = match t5_result with
  | Some t5_computed_plaintext ->
    let result5a = test_compare_buffers "5a. plaintext" t5_output_plaintext t5_computed_plaintext in
    result5a
  | None -> begin
    IO.print_string "\nCould not decipher : Failed !\n"; false
  end in

  IO.print_string "\n\nTEST 6: (Spec.Signal.Core.decrypt)\n";
  let t6_result =
    Spec.Signal.Core.decrypt
      t6_input_ourIdentityPubKey
      t6_input_theirIdentityPubKey
      t6_input_remoteEphemeralKey
      t6_input_messageKey
      t6_input_previousCounter
      t6_input_counter
      t6_input_ciphertext
      t6_input_macTag
  in
  let result6 = match t6_result with
  | Some (t6_computed_plaintext) ->
    let result6a = test_compare_buffers "6a. plaintext" t6_output_plaintext t6_computed_plaintext in
    result6a
  | None -> begin
    IO.print_string "\nCould not decipher : Failed !\n"; false
  end in

  IO.print_string "\n\nTEST 7: (Spec.Signal.Core.verify)\n";
  let t7_result = Spec.Signal.Core.verify_sig
      t7_input_identityPubKey
      t7_input_signedPubKey
      t7_input_signature
   in
   let result7 = begin if t7_result then begin
     IO.print_string "\Success !\n"; true
   end else begin
     IO.print_string "\nFailed !\n"; false
   end end in

  IO.print_string "\n\nTEST 8: (Spec.Signal.Core.sign)\n";
  let t8_computed_signature = Spec.Signal.Core.sign
      t8_input_privKey
      t8_input_pubKey
   in
  let result8 = test_compare_buffers "8. signature" t8_output_signature t8_computed_signature in

  //
  // RESULT
  //
  if
    result0a && result0b && result1a && result1b && result2 && result3 &&
    result4 && result5 && result6 &&  result7 && result8
  then
    IO.print_string "\n\nComposite Result: Success !\n"
  else
    IO.print_string "\n\nComposite Result: Failed !\n"

#set-options "--admit_smt_queries false"
